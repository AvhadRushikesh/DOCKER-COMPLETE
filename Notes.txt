Introducing Volumes:

Volumes are folders on your host machine-hard drive which are mounted ("mode available", mapped) into containers
Volumes persist if a container shuts down.If a container (re-)starts & mounts volume, any data inside of that volume is available in the container.
A container can write data into a volume and read data from it.





create NamedVolume
docker rmi feedback-node:volumes
docker build -t feedback-node:volumes .
docker run -d -p 3000:3000 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes
localhost:3000/feedback/awesome.txt
docker stop feedback-app  -- this will remove container because we have use --rm tag in run container command
but if we recreate container with same volumeName will get the copied data from volume by following url
localhost:3000/feedback/awesome.txt
we can check the volume using
docker volume ls
recreate / restart container with same volumeName
docker run -d -p 3000:3000 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes

Working with Environment Variable & ".env" Files
docker build -t feedback-node:env .
docker run -d --rm -p 3000:3000 --name feedback-app -v feedback:/app/feedback -v "/D:/SMBios/Training/Udemy/Docker/
D & K - Maxmilian/DOCKER-COMPLETE:/app:ro" -v /app/node_modules -v /app/temp feedback-node:env

docker run -d --rm -p 3000:3000 --name feedback-app -v feedback:/app/feedback -v /app/temp feedback-node:env

docker run -d --rm -p 3000:3000 -e PORT=5000 -e PORT=7000 -e PORT=9000 --name feedback-app -v feedback:/app/feedback -v /app/temp feedback-node:env

docker run -d --rm -p 3000:3000 --env PORT=5000 --name feedback-app -v feedback:/app/feedback -v /app/temp feedback-node:env
#(The advantage of using .env file is that You can always use the same command & change the Environment Variable inside .env file)

docker run -d --rm -p 3000:3000 --env-file ./.env --name feedback-app -v feedback:/app/feedback -v /app/temp feedback-node:env



Environment Variable & Security
1.One important note about environment variables and security:
Depending on which kind of data you're storing in your environment variables,
you might not want to include the secure data directly in your Dockerfile.
2.Instead, go for a separate environment variables file which is then only used at runtime
(i.e. when you run your container with docker run).
3.Otherwise, the values are "baked into the image" and everyone can read these values via docker history <image>.
4.For some values, this might not matter but for credentials, private keys etc. you definitely want to avoid that!
5.If you use a separate file,
the values are not part of the image since you point at that file when you run docker run.
But make sure you don't commit that separate file as part of your source control repository,
if you're using source control.


Creating a container & communicating to the web (WWW)
docker build -t favorites-node .
docker run --name favorites -d --rm -p 3000:3000 favorites-node
docker run --name favorites --rm -p 3000:3000 favorites-node (some connection faild - mongoDB)